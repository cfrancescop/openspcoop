/*
 * OpenSPCoop v2 - Customizable SOAP Message Broker 
 * http://www.openspcoop2.org
 * 
 * Copyright (c) 2005-2016 Link.it srl (http://link.it).
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.openspcoop2.core.diagnostica.ws.client.informazioniprotocollotransazione.search;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

import org.openspcoop2.core.diagnostica.IdInformazioniProtocolloTransazione;
import org.openspcoop2.core.diagnostica.constants.TipoPdD;
import org.openspcoop2.utils.date.DateManager;

/**
 * This class was generated by Apache CXF 2.7.4
 * 2015-02-18T17:21:59.875+01:00
 * Generated source version: 2.7.4
 * 
 */
public final class InformazioniProtocolloTransazione_InformazioniProtocolloTransazionePortSoap11_Client {

	private static final QName SERVICE_NAME = new QName("http://www.openspcoop2.org/core/diagnostica/management", "InformazioniProtocolloTransazioneSoap11Service");

	private InformazioniProtocolloTransazione_InformazioniProtocolloTransazionePortSoap11_Client() {
	}

	public static void main(String args[]) throws java.lang.Exception {
		URL wsdlURL = InformazioniProtocolloTransazioneSoap11Service.WSDL_LOCATION;
		if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
			File wsdlFile = new File(args[0]);
			try {
				if (wsdlFile.exists()) {
					wsdlURL = wsdlFile.toURI().toURL();
				} else {
					wsdlURL = new URL(args[0]);
				}
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
		}

		InformazioniProtocolloTransazioneSoap11Service ss = new InformazioniProtocolloTransazioneSoap11Service(wsdlURL, InformazioniProtocolloTransazione_InformazioniProtocolloTransazionePortSoap11_Client.SERVICE_NAME);
		InformazioniProtocolloTransazione port = ss.getInformazioniProtocolloTransazionePortSoap11();

		new org.openspcoop2.core.diagnostica.ws.client.utils.RequestContextUtils("informazioniProtocolloTransazione.soap11").addRequestContextParameters((javax.xml.ws.BindingProvider)port);  

		long _count__return = 0;
		{
			System.out.println("Invoking count...");
			org.openspcoop2.core.diagnostica.ws.client.informazioniprotocollotransazione.search.SearchFilterInformazioniProtocolloTransazione _count_filter = new SearchFilterInformazioniProtocolloTransazione();
			try {
				_count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);

			} catch (DiagnosticaServiceException_Exception e) { 
				System.out.println("Expected exception: diagnostica-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (DiagnosticaNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (DiagnosticaNotImplementedException_Exception e) { 
				System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		if(_count__return>0){


			org.openspcoop2.core.diagnostica.InformazioniProtocolloTransazione infoCampione = null;
			{
				System.out.println("Invoking findAll...");
				org.openspcoop2.core.diagnostica.ws.client.informazioniprotocollotransazione.search.SearchFilterInformazioniProtocolloTransazione _findAll_filter = new SearchFilterInformazioniProtocolloTransazione();
				try {
					_findAll_filter.setLimit(new BigInteger("10"));
					java.util.List<org.openspcoop2.core.diagnostica.InformazioniProtocolloTransazione> _findAll__return = port.findAll(_findAll_filter);
					System.out.println("findAll.result=" + _findAll__return.size());
					for (org.openspcoop2.core.diagnostica.InformazioniProtocolloTransazione informazioniProtocolloTransazione : _findAll__return) {
						if(infoCampione==null){
							infoCampione=informazioniProtocolloTransazione;
						}
						System.out.println("["+informazioniProtocolloTransazione.getOraRegistrazione()+"]["+informazioniProtocolloTransazione.getIdentificativoRichiesta()+"]["+informazioniProtocolloTransazione.getTipoPdD()+"]["+informazioniProtocolloTransazione.getDominio().getIdentificativoPorta()+"]");
					}

				} catch (DiagnosticaServiceException_Exception e) { 
					System.out.println("Expected exception: diagnostica-service-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotAuthorizedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotImplementedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
					System.out.println(e.toString());
				}
			}
			
			
			{
				System.out.println("Invoking get...");
				org.openspcoop2.core.diagnostica.IdInformazioniProtocolloTransazione _get_idInformazioniProtocolloTransazione = new org.openspcoop2.core.diagnostica.IdInformazioniProtocolloTransazione();
				try {
					_get_idInformazioniProtocolloTransazione.setIdentificativoRichiesta(infoCampione.getIdentificativoRichiesta());
					_get_idInformazioniProtocolloTransazione.setTipoPdD(infoCampione.getTipoPdD());
					org.openspcoop2.core.diagnostica.InformazioniProtocolloTransazione _get__return = port.get(_get_idInformazioniProtocolloTransazione);
					if(_get__return.equals(infoCampione)){
						System.out.println("get.result=OK");
					}
					else{
						StringBuffer bf = new StringBuffer();
						_get__return.diff(infoCampione, bf);
						System.out.println("get.result=KO "+bf.toString());
					}

				} catch (DiagnosticaServiceException_Exception e) { 
					System.out.println("Expected exception: diagnostica-service-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotFoundException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-found-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotAuthorizedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotImplementedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaMultipleResultException_Exception e) { 
					System.out.println("Expected exception: diagnostica-multiple-result-exception has occurred.");
					System.out.println(e.toString());
				}
			}
			
			
			{
				System.out.println("Invoking get NotExists Expected...");
				org.openspcoop2.core.diagnostica.IdInformazioniProtocolloTransazione _get_idInformazioniProtocolloTransazione = new org.openspcoop2.core.diagnostica.IdInformazioniProtocolloTransazione();
				try {
					_get_idInformazioniProtocolloTransazione.setIdentificativoRichiesta(infoCampione.getIdentificativoRichiesta()+"_INESISTENTE");
					_get_idInformazioniProtocolloTransazione.setTipoPdD(infoCampione.getTipoPdD());
					port.get(_get_idInformazioniProtocolloTransazione);
					throw new Exception("Attesa not found exception"); 

				} catch (DiagnosticaServiceException_Exception e) { 
					System.out.println("Expected exception: diagnostica-service-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotFoundException_Exception e) { 
					System.out.println("Invoking get NotExists Expected OK");
				} catch (DiagnosticaNotAuthorizedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotImplementedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaMultipleResultException_Exception e) { 
					System.out.println("Expected exception: diagnostica-multiple-result-exception has occurred.");
					System.out.println(e.toString());
				}
			}
			
			
			{
				System.out.println("Invoking exists...");
				org.openspcoop2.core.diagnostica.IdInformazioniProtocolloTransazione _exists_idInformazioniProtocolloTransazione = new org.openspcoop2.core.diagnostica.IdInformazioniProtocolloTransazione();
				try {
					_exists_idInformazioniProtocolloTransazione.setIdentificativoRichiesta(infoCampione.getIdentificativoRichiesta());
					_exists_idInformazioniProtocolloTransazione.setTipoPdD(infoCampione.getTipoPdD());
					boolean _exists__return = port.exists(_exists_idInformazioniProtocolloTransazione);
					System.out.println("exists.result (ok)=" + _exists__return);
					if(!_exists__return){
						throw new Exception("Atteso true");
					}

					_exists_idInformazioniProtocolloTransazione.setIdentificativoRichiesta(infoCampione.getIdentificativoRichiesta()+"_INESISTENTE");
					_exists__return = port.exists(_exists_idInformazioniProtocolloTransazione);
					System.out.println("exists.result (ko)=" + _exists__return);
					if(_exists__return){
						throw new Exception("Atteso false");
					}

				} catch (DiagnosticaServiceException_Exception e) { 
					System.out.println("Expected exception: diagnostica-service-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotAuthorizedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotImplementedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaMultipleResultException_Exception e) { 
					System.out.println("Expected exception: diagnostica-multiple-result-exception has occurred.");
					System.out.println(e.toString());
				}
			}
			

			{
				System.out.println("Invoking find...");
				org.openspcoop2.core.diagnostica.ws.client.informazioniprotocollotransazione.search.SearchFilterInformazioniProtocolloTransazione _find_filter = new SearchFilterInformazioniProtocolloTransazione();
				try {
					_find_filter.setIdentificativoRichiesta(infoCampione.getIdentificativoRichiesta());
					_find_filter.setTipoPdD(infoCampione.getTipoPdD());
					org.openspcoop2.core.diagnostica.InformazioniProtocolloTransazione _find__return = port.find(_find_filter);
					if(_find__return.equals(infoCampione)){
						System.out.println("find.result=OK");
					}
					else{
						StringBuffer bf = new StringBuffer();
						_find__return.diff(infoCampione, bf);
						System.out.println("find.result=KO "+bf.toString());
					}

				} catch (DiagnosticaServiceException_Exception e) { 
					System.out.println("Expected exception: diagnostica-service-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotFoundException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-found-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotAuthorizedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotImplementedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaMultipleResultException_Exception e) { 
					System.out.println("Expected exception: diagnostica-multiple-result-exception has occurred.");
					System.out.println(e.toString());
				}
			}
			
			
			{
				System.out.println("Invoking find NotExists...");
				org.openspcoop2.core.diagnostica.ws.client.informazioniprotocollotransazione.search.SearchFilterInformazioniProtocolloTransazione _find_filter = new SearchFilterInformazioniProtocolloTransazione();
				try {
					_find_filter.setIdentificativoRichiesta(infoCampione.getIdentificativoRichiesta()+"Errato");
					_find_filter.setTipoPdD(infoCampione.getTipoPdD());
					port.find(_find_filter);
					throw new Exception("Attesa not found exception"); 

				} catch (DiagnosticaServiceException_Exception e) { 
					System.out.println("Expected exception: diagnostica-service-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotFoundException_Exception e) { 
					System.out.println("Invoking get NotExists Expected OK");
				} catch (DiagnosticaNotAuthorizedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotImplementedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaMultipleResultException_Exception e) { 
					System.out.println("Expected exception: diagnostica-multiple-result-exception has occurred.");
					System.out.println(e.toString());
				}
			}
			
			
			{
				System.out.println("Invoking findAllIds...");
				org.openspcoop2.core.diagnostica.ws.client.informazioniprotocollotransazione.search.SearchFilterInformazioniProtocolloTransazione _findAllIds_filter = new SearchFilterInformazioniProtocolloTransazione();
				try {
					_findAllIds_filter.setLimit(new BigInteger("10"));
					java.util.List<org.openspcoop2.core.diagnostica.IdInformazioniProtocolloTransazione> _findAllIds__return = port.findAllIds(_findAllIds_filter);
					System.out.println("findAllIds.result=" + _findAllIds__return.size());
					for (IdInformazioniProtocolloTransazione idInformazioniProtocolloTransazione : _findAllIds__return) {
						System.out.println("["+idInformazioniProtocolloTransazione.getIdentificativoRichiesta()+"]["+idInformazioniProtocolloTransazione.getTipoPdD()+"]");
					}

				} catch (DiagnosticaServiceException_Exception e) { 
					System.out.println("Expected exception: diagnostica-service-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotAuthorizedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotImplementedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
					System.out.println(e.toString());
				}
			}
			
			
			{
				System.out.println("Invoking findAllIds (Filter)...");
				org.openspcoop2.core.diagnostica.ws.client.informazioniprotocollotransazione.search.SearchFilterInformazioniProtocolloTransazione _findAllIds_filter = new SearchFilterInformazioniProtocolloTransazione();
				try {
					_findAllIds_filter.setLimit(new BigInteger("10"));
					
					Soggetto fruitore = new Soggetto();
					fruitore.setIdentificativo(new org.openspcoop2.core.diagnostica.ws.client.informazioniprotocollotransazione.search.SoggettoIdentificativo());
					fruitore.getIdentificativo().setTipo("SPC");
					fruitore.getIdentificativo().setBase("MinisteroFruitore");
					_findAllIds_filter.setFruitore(fruitore);
					
					Soggetto erogatore = new Soggetto();
					erogatore.setIdentificativo(new org.openspcoop2.core.diagnostica.ws.client.informazioniprotocollotransazione.search.SoggettoIdentificativo());
					erogatore.getIdentificativo().setTipo("SPC");
					erogatore.getIdentificativo().setBase("MinisteroErogatore");
					_findAllIds_filter.setErogatore(erogatore);
					
					Servizio servizio = new Servizio();
					servizio.setTipo("SPC");
					servizio.setBase("RichiestaStatoAvanzamentoAsincronoAsimmetricoCorrelato");
					servizio.setVersione(new BigInteger("1"));
					_findAllIds_filter.setServizio(servizio);
					
					_findAllIds_filter.setAzione("richiestaAsincronaStateful");
					
					_findAllIds_filter.setCorrelazioneApplicativaAndMatch(true);
					_findAllIds_filter.setIdentificativoCorrelazioneRichiesta("XXXRICH");
					_findAllIds_filter.setIdentificativoCorrelazioneRisposta("XXXRISP");
					
					_findAllIds_filter.setDescOrder(true);
					
					_findAllIds_filter.setDominio(new DominioTransazione());
					_findAllIds_filter.getDominio().setIdentificativoPorta("MinisteroFruitoreSPCoopIT");
					_findAllIds_filter.getDominio().setSoggetto(new DominioSoggetto());
					_findAllIds_filter.getDominio().getSoggetto().setBase("MinisteroFruitore");
					_findAllIds_filter.getDominio().getSoggetto().setTipo("SPC");
					
					FiltroInformazioniDiagnostici filtro = new FiltroInformazioniDiagnostici();
					filtro.setCodice("003007");
					filtro.setIdentificativoRisposta("MinisteroErogatore_MinisteroErogatoreSPCoopIT_0000021_2015-02-16_17:11");
					filtro.setMessaggio("inviato alla parte destinataria");
					filtro.setModulo("InoltroBuste");
					filtro.setSeverita(new BigInteger("3"));
					_findAllIds_filter.setFiltroInformazioniDiagnostici(filtro);
					
					_findAllIds_filter.setFiltroServizioApplicativo("Anonimo");
					
					_findAllIds_filter.setIdentificativoRichiesta("MinisteroFruitore_MinisteroFruitoreSPCoopIT_0000020_2015-02-16_17:11");
					
					_findAllIds_filter.setNomePorta("CooperazioneAsincronaAsimmetricaCorrelata_richiestaAsincrona_Stateful");
					
					Calendar cMax = DateManager.getCalendar();
					cMax.setTime(new Date(System.currentTimeMillis()+10000));
					XMLGregorianCalendar max = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMax);
					_findAllIds_filter.setOraRegistrazioneMax(max);
									
					Calendar cMin = DateManager.getCalendar();
					cMin.setTime(new Date(System.currentTimeMillis()-500000000));
					XMLGregorianCalendar min = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMin);
					_findAllIds_filter.setOraRegistrazioneMin(min);
					
					_findAllIds_filter.setProtocollo(new Protocollo());
					_findAllIds_filter.getProtocollo().setIdentificativo("spcoop");
					
					_findAllIds_filter.setTipoPdD(TipoPdD.PORTA_DELEGATA);
					
					java.util.List<org.openspcoop2.core.diagnostica.IdInformazioniProtocolloTransazione> _findAllIds__return = port.findAllIds(_findAllIds_filter);
					System.out.println("findAllIds.result=" + _findAllIds__return.size());
					for (IdInformazioniProtocolloTransazione idInformazioniProtocolloTransazione : _findAllIds__return) {
						System.out.println("["+idInformazioniProtocolloTransazione.getIdentificativoRichiesta()+"]["+idInformazioniProtocolloTransazione.getTipoPdD()+"]");
					}

				} catch (DiagnosticaServiceException_Exception e) { 
					System.out.println("Expected exception: diagnostica-service-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotAuthorizedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-authorized-exception has occurred.");
					System.out.println(e.toString());
				} catch (DiagnosticaNotImplementedException_Exception e) { 
					System.out.println("Expected exception: diagnostica-not-implemented-exception has occurred.");
					System.out.println(e.toString());
				}
			}
			

		}


		System.exit(0);
	}

}
