/*
 * OpenSPCoop - Customizable API Gateway 
 * http://www.openspcoop2.org
 * 
 * Copyright (c) 2005-2016 Link.it srl (http://link.it).
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.openspcoop2.core.registry.ws.client.accordocooperazione.all;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

import org.openspcoop2.utils.date.DateManager;

/**
 * This class was generated by Apache CXF 2.7.4
 * 2014-11-19T17:44:09.536+01:00
 * Generated source version: 2.7.4
 * 
 */
public final class AccordoCooperazione_AccordoCooperazionePortSoap11_Client {

	private static final QName SERVICE_NAME = new QName("http://www.openspcoop2.org/core/registry/management", "AccordoCooperazioneSoap11Service");

	private AccordoCooperazione_AccordoCooperazionePortSoap11_Client() {
	}

	public static void main(String args[]) throws java.lang.Exception {
		URL wsdlURL = AccordoCooperazioneSoap11Service.WSDL_LOCATION;
		if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
			File wsdlFile = new File(args[0]);
			try {
				if (wsdlFile.exists()) {
					wsdlURL = wsdlFile.toURI().toURL();
				} else {
					wsdlURL = new URL(args[0]);
				}
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
		}

		AccordoCooperazioneSoap11Service ss = new AccordoCooperazioneSoap11Service(wsdlURL, AccordoCooperazione_AccordoCooperazionePortSoap11_Client.SERVICE_NAME);
		AccordoCooperazione port = ss.getAccordoCooperazionePortSoap11();

		new org.openspcoop2.core.registry.ws.client.utils.RequestContextUtils("accordoCooperazione.soap11").addRequestContextParameters((javax.xml.ws.BindingProvider)port);  

        Date startDate = DateManager.getDate();
		
		{
			System.out.println("Invoking deleteAll...");
			try {
				long _deleteAll__return = port.deleteAll();
				System.out.println("deleteAll.result=" + _deleteAll__return);

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		org.openspcoop2.core.registry.AccordoCooperazione _create_accordoCooperazione = null;
		{
			System.out.println("Invoking create...");
			_create_accordoCooperazione = new org.openspcoop2.core.registry.AccordoCooperazione();
			try {
				_create_accordoCooperazione.setNome("AC");
				_create_accordoCooperazione.setDescrizione("AccordoCooperazione di test");
				_create_accordoCooperazione.setVersione("1");
				_create_accordoCooperazione.setPrivato(true);

				port.create(_create_accordoCooperazione);
				System.out.println("CREATO");

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}


		{
			System.out.println("Invoking count...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _count_filter = null;
			try {
				_count_filter = new SearchFilterAccordoCooperazione();
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count senza filtro errato");
				}

				_count_filter.setNome("AC");
				_count__return = port.count(_count_filter);
				System.out.println("count.result (filtro ok) =" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count con filtro ok");
				}

				_count_filter.setVersione("2");
				_count__return = port.count(_count_filter);
				System.out.println("count.result (filtro ko) =" + _count__return);
				if(_count__return!=0){
					throw new Exception("Risultato count con filtro ko errato");
				}
				
				_count_filter.setVersione(null);
				_count_filter.setPrivato(true);
				_count__return = port.count(_count_filter);
				System.out.println("count.result (filtro privato ok) =" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count con filtro ok privato");
				}
				
				_count_filter.setPrivato(false);
				_count__return = port.count(_count_filter);
				System.out.println("count.result (filtro privato ko) =" + _count__return);
				if(_count__return!=0){
					throw new Exception("Risultato count con filtro ko privato");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}


		{
			System.out.println("Invoking get...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _get_idAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			try {
				_get_idAccordoCooperazione.setNome("AC");
				_get_idAccordoCooperazione.setVersione("1");
				org.openspcoop2.core.registry.AccordoCooperazione _get__return = port.get(_get_idAccordoCooperazione);
				List<String> notCheck = new ArrayList<String>();
				notCheck.add("statoPackage");
				notCheck.add("oraRegistrazione");
				boolean equals = _get__return.equals(_create_accordoCooperazione,notCheck);
				System.out.println("get.result (equals con create)=" + equals);
				if(!equals){
					StringBuffer bfDiff = new StringBuffer();
					_get__return.diff(_create_accordoCooperazione, bfDiff);
					throw new Exception("Differenze [get vs create]: "+bfDiff.toString());
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotFoundException_Exception e) { 
				System.out.println("Expected exception: registry-not-found-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryMultipleResultException_Exception e) { 
				System.out.println("Expected exception: registry-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		{
			System.out.println("Invoking find...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _find_filter = null;
			try {
				_find_filter = new SearchFilterAccordoCooperazione();
				org.openspcoop2.core.registry.AccordoCooperazione _find__return = port.find(_find_filter);
				List<String> notCheck = new ArrayList<String>();
				notCheck.add("statoPackage");
				notCheck.add("oraRegistrazione");
				boolean equals = _find__return.equals(_create_accordoCooperazione,notCheck);
				System.out.println("find.result (equals con create)=" + equals);
				if(!equals){
					StringBuffer bfDiff = new StringBuffer();
					_find__return.diff(_create_accordoCooperazione, bfDiff);
					throw new Exception("Differenze [get vs create]: "+bfDiff.toString());
				}

				_find_filter = new SearchFilterAccordoCooperazione();
				_find_filter.setNome("AC");
				_find__return = port.find(_find_filter);
				equals = _find__return.equals(_create_accordoCooperazione,notCheck);
				System.out.println("find.result con filtro (equals con create)=" + equals);
				if(!equals){
					StringBuffer bfDiff = new StringBuffer();
					_find__return.diff(_create_accordoCooperazione, bfDiff);
					throw new Exception("Differenze [get vs create]: "+bfDiff.toString());
				}

				_find_filter = new SearchFilterAccordoCooperazione();
				_find_filter.setNome("AC");
				IdSoggetto idSoggetto = new IdSoggetto();
				idSoggetto.setNome("SBAGLIATO");
				_find_filter.setSoggettoReferente(idSoggetto);
				try{
					_find__return = port.find(_find_filter);
					throw new Exception("Expected Not Found");
				}catch (RegistryNotFoundException_Exception e) { 
					System.out.println("NOT FOUND ATTESO");
				}
			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotFoundException_Exception e) { 
				System.out.println("Expected exception: registry-not-found-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryMultipleResultException_Exception e) { 
				System.out.println("Expected exception: registry-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}



		{
			System.out.println("Invoking updateOrCreate...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _updateOrCreate_oldIdAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			_updateOrCreate_oldIdAccordoCooperazione.setNome("AC2");
			_updateOrCreate_oldIdAccordoCooperazione.setVersione("1");
			org.openspcoop2.core.registry.AccordoCooperazione _updateOrCreate_accordoCooperazione = new org.openspcoop2.core.registry.AccordoCooperazione();
			_updateOrCreate_accordoCooperazione.setNome("AC2");
			_updateOrCreate_accordoCooperazione.setVersione("1");
			try {
				port.updateOrCreate(_updateOrCreate_oldIdAccordoCooperazione, _updateOrCreate_accordoCooperazione);
				System.out.println("CREATO");

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}



		{

			SearchFilterAccordoCooperazione _find_filter = new SearchFilterAccordoCooperazione();
			try{
				port.find(_find_filter);
				throw new Exception("Expected Multiple Result");
			}catch (RegistryMultipleResultException_Exception e) { 
				System.out.println("MULTIPLE RESULT ATTESO");
			}

		}



		{
			System.out.println("Invoking findAll...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _findAll_filter = new SearchFilterAccordoCooperazione();
			try {
				_findAll_filter.setVersione("1");
				java.util.List<org.openspcoop2.core.registry.AccordoCooperazione> _findAll__return = port.findAll(_findAll_filter);
				System.out.println("findAll.result=" + _findAll__return.size());
				if(2!=_findAll__return.size()){
					throw new Exception("Ritornata dimensione errata");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}		


		{
			System.out.println("Invoking exists...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _exists_idAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			try {
				_exists_idAccordoCooperazione.setNome("AC");
				_exists_idAccordoCooperazione.setVersione("1");

				boolean _exists__return = port.exists(_exists_idAccordoCooperazione);
				System.out.println("exists.result=" + _exists__return);
				if(!_exists__return){
					throw new Exception("Non trovato???");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryMultipleResultException_Exception e) { 
				System.out.println("Expected exception: registry-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		{
			System.out.println("Invoking update...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _update_oldIdAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			_update_oldIdAccordoCooperazione.setNome("AC");
			_update_oldIdAccordoCooperazione.setVersione("1");
			_create_accordoCooperazione.setNome("ACNUOVO");
			_create_accordoCooperazione.setDescrizione("Ho aggiunto la descrizione");
			try {
				port.update(_update_oldIdAccordoCooperazione, _create_accordoCooperazione);

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotFoundException_Exception e) { 
				System.out.println("Expected exception: registry-not-found-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}		


		{
			System.out.println("Invoking get per verifica UPDATE...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _get_idAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			try {
				_get_idAccordoCooperazione.setNome("ACNUOVO");
				_get_idAccordoCooperazione.setVersione("1");
				org.openspcoop2.core.registry.AccordoCooperazione _get__return = port.get(_get_idAccordoCooperazione);
				List<String> notCheck = new ArrayList<String>();
				notCheck.add("statoPackage");
				notCheck.add("oraRegistrazione");
				boolean equals = _get__return.equals(_create_accordoCooperazione,notCheck);
				System.out.println("get.result (equals con create)=" + equals);
				if(!equals){
					StringBuffer bfDiff = new StringBuffer();
					_get__return.diff(_create_accordoCooperazione, bfDiff);
					throw new Exception("Differenze [get vs create]: "+bfDiff.toString());
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotFoundException_Exception e) { 
				System.out.println("Expected exception: registry-not-found-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryMultipleResultException_Exception e) { 
				System.out.println("Expected exception: registry-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		{
			System.out.println("Invoking exists per verifica UPDATE ...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _exists_idAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			try {
				_exists_idAccordoCooperazione.setNome("AC");
				_exists_idAccordoCooperazione.setVersione("1");

				boolean _exists__return = port.exists(_exists_idAccordoCooperazione);
				System.out.println("exists.result=" + _exists__return);
				if(_exists__return){
					throw new Exception("Trovato???");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryMultipleResultException_Exception e) { 
				System.out.println("Expected exception: registry-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}



		{
			System.out.println("Invoking updateOrCreate...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _update_oldIdAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			_update_oldIdAccordoCooperazione.setNome("ACNUOVO");
			_update_oldIdAccordoCooperazione.setVersione("1");
			_create_accordoCooperazione.setNome("ACNUOVOANCORAPIUNUOVO");
			_create_accordoCooperazione.setDescrizione("Ho aggiunto la descrizione e il privato");
			_create_accordoCooperazione.setPrivato(true);
			try {
				port.updateOrCreate(_update_oldIdAccordoCooperazione, _create_accordoCooperazione);

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			}catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}		


		{
			System.out.println("Invoking get per verifica UPDATE OR CREATE...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _get_idAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			try {
				_get_idAccordoCooperazione.setNome("ACNUOVOANCORAPIUNUOVO");
				_get_idAccordoCooperazione.setVersione("1");
				org.openspcoop2.core.registry.AccordoCooperazione _get__return = port.get(_get_idAccordoCooperazione);
				List<String> notCheck = new ArrayList<String>();
				notCheck.add("statoPackage");
				notCheck.add("oraRegistrazione");
				boolean equals = _get__return.equals(_create_accordoCooperazione,notCheck);
				System.out.println("get.result (equals con create)=" + equals);
				if(!equals){
					StringBuffer bfDiff = new StringBuffer();
					_get__return.diff(_create_accordoCooperazione, bfDiff);
					throw new Exception("Differenze [get vs create]: "+bfDiff.toString());
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotFoundException_Exception e) { 
				System.out.println("Expected exception: registry-not-found-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryMultipleResultException_Exception e) { 
				System.out.println("Expected exception: registry-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		{
			System.out.println("Invoking exists per verifica UPDATE OR CREATE ...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _exists_idAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			try {
				_exists_idAccordoCooperazione.setNome("ACNUOVO");
				_exists_idAccordoCooperazione.setVersione("1");

				boolean _exists__return = port.exists(_exists_idAccordoCooperazione);
				System.out.println("exists.result=" + _exists__return);
				if(_exists__return){
					throw new Exception("Trovato???");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryMultipleResultException_Exception e) { 
				System.out.println("Expected exception: registry-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}


		{
			System.out.println("Invoking findAllIds...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _findAllIds_filter = null;
			try {
				_findAllIds_filter = new SearchFilterAccordoCooperazione();
				_findAllIds_filter.setLimit(new BigInteger("15"));
				java.util.List<org.openspcoop2.core.registry.IdAccordoCooperazione> _findAllIds__return = port.findAllIds(_findAllIds_filter);
				System.out.println("findAllIds.result=" + _findAllIds__return.size());
				if(2!=_findAllIds__return.size()){
					throw new Exception("Attesi 2 id");
				}

				_findAllIds_filter = new SearchFilterAccordoCooperazione();
				_findAllIds_filter.setNome("AC2");
				_findAllIds_filter.setLimit(new BigInteger("15"));
				_findAllIds__return = port.findAllIds(_findAllIds_filter);
				System.out.println("findAllIds.result (con filtro)=" + _findAllIds__return.size());
				if(1!=_findAllIds__return.size()){
					throw new Exception("Attesi 1 id");
				}

				_findAllIds_filter = new SearchFilterAccordoCooperazione();
				_findAllIds_filter.setOffset(new BigInteger("1"));
				_findAllIds__return = port.findAllIds(_findAllIds_filter);
				System.out.println("findAllIds.result (con offset)=" + _findAllIds__return.size());
				if(1!=_findAllIds__return.size()){
					throw new Exception("Attesi 1 id");
				}

				_findAllIds_filter = new SearchFilterAccordoCooperazione();
				_findAllIds_filter.setOffset(new BigInteger("2"));
				_findAllIds_filter.setLimit(new BigInteger("23"));
				_findAllIds__return = port.findAllIds(_findAllIds_filter);
				System.out.println("findAllIds.result (con offset e limit)=" + _findAllIds__return.size());
				if(0!=_findAllIds__return.size()){
					throw new Exception("Attesi 0 id");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}



		{
			System.out.println("Invoking deleteById...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _deleteById_idAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			try {
				_deleteById_idAccordoCooperazione.setNome("AC2");
				_deleteById_idAccordoCooperazione.setVersione("1");
				port.deleteById(_deleteById_idAccordoCooperazione);

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		{
			System.out.println("Invoking exists per verifica DELETE BY ID ...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _exists_idAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			try {
				_exists_idAccordoCooperazione.setNome("AC2");
				_exists_idAccordoCooperazione.setVersione("1");

				boolean _exists__return = port.exists(_exists_idAccordoCooperazione);
				System.out.println("exists.result=" + _exists__return);
				if(_exists__return){
					throw new Exception("Trovato???");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryMultipleResultException_Exception e) { 
				System.out.println("Expected exception: registry-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}



		{
			System.out.println("Invoking delete...");
			try {
				port.delete(_create_accordoCooperazione);

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}


		{
			System.out.println("Invoking count verifica DELETE...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _count_filter = null;
			try {
				_count_filter = new SearchFilterAccordoCooperazione();
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=0){
					throw new Exception("Risultato count senza filtro errato");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}




		{
			System.out.println("Invoking updateOrCreate...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _update_oldIdAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			_update_oldIdAccordoCooperazione.setNome(_create_accordoCooperazione.getNome());
			_update_oldIdAccordoCooperazione.setVersione(_create_accordoCooperazione.getVersione());
			try {
				port.updateOrCreate(_update_oldIdAccordoCooperazione, _create_accordoCooperazione);

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			}catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}




		{
			System.out.println("Invoking deleteAllByFilter...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _deleteAllByFilter_filter = null;
			try {
				_deleteAllByFilter_filter = new SearchFilterAccordoCooperazione();
				long _deleteAllByFilter__return = port.deleteAllByFilter(_deleteAllByFilter_filter);
				System.out.println("deleteAllByFilter.result=" + _deleteAllByFilter__return);
				if(1!=_deleteAllByFilter__return){
					throw new Exception("Attesa 1 eliminazione");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _count_filter = null;
			try {
				_count_filter = new SearchFilterAccordoCooperazione();
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=0){
					throw new Exception("Risultato count senza filtro errato");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		
		{
			System.out.println("Invoking updateOrCreate...");
			org.openspcoop2.core.registry.IdAccordoCooperazione _update_oldIdAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
			_update_oldIdAccordoCooperazione.setNome(_create_accordoCooperazione.getNome());
			_update_oldIdAccordoCooperazione.setVersione(_create_accordoCooperazione.getVersione());
			try {
				port.updateOrCreate(_update_oldIdAccordoCooperazione, _create_accordoCooperazione);

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			}catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}


		
		{
			System.out.println("Invoking deleteAllByFilter...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _deleteAllByFilter_filter = null;
			try {
				_deleteAllByFilter_filter = new SearchFilterAccordoCooperazione();
				_deleteAllByFilter_filter.setNome("PROVASBAGLIATA");
				long _deleteAllByFilter__return = port.deleteAllByFilter(_deleteAllByFilter_filter);
				System.out.println("deleteAllByFilter.result=" + _deleteAllByFilter__return);
				if(0!=_deleteAllByFilter__return){
					throw new Exception("Attesa 0 eliminazione");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		
		
		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _count_filter = null;
			try {
				_count_filter = new SearchFilterAccordoCooperazione();
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count senza filtro errato");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		

		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER (Con date min e max)...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _count_filter = null;
			try {
				_count_filter = new SearchFilterAccordoCooperazione();
				
				Calendar cMin = Calendar.getInstance();
				cMin.setTime(startDate);
				XMLGregorianCalendar xmlMin = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMin);
				_count_filter.setOraRegistrazioneMin(xmlMin);

				Calendar cMax = Calendar.getInstance();
				cMax.setTime(DateManager.getDate());
				XMLGregorianCalendar xmlMax = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMax);
				_count_filter.setOraRegistrazioneMax(xmlMax);
				
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count (Con date min e max) errato");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER (Con date min e max errate)...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _count_filter = null;
			try {
				_count_filter = new SearchFilterAccordoCooperazione();
				
				Calendar cMin = Calendar.getInstance();
				//cMin.setTime(startDate);
				cMin.setTime(DateManager.getDate());
				XMLGregorianCalendar xmlMin = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMin);
				_count_filter.setOraRegistrazioneMin(xmlMin);

				Calendar cMax = Calendar.getInstance();
				cMax.setTime(DateManager.getDate());
				XMLGregorianCalendar xmlMax = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMax);
				_count_filter.setOraRegistrazioneMax(xmlMax);
				
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=0){
					throw new Exception("Risultato count (Con date min e max errate) errato");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER (Con date min)...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _count_filter = null;
			try {
				_count_filter = new SearchFilterAccordoCooperazione();
				
				Calendar cMin = Calendar.getInstance();
				cMin.setTime(startDate);
				XMLGregorianCalendar xmlMin = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMin);
				_count_filter.setOraRegistrazioneMin(xmlMin);
				
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count (Con date min) errato");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER (Con date max)...");
			org.openspcoop2.core.registry.ws.client.accordocooperazione.all.SearchFilterAccordoCooperazione _count_filter = null;
			try {
				_count_filter = new SearchFilterAccordoCooperazione();

				Calendar cMax = Calendar.getInstance();
				cMax.setTime(DateManager.getDate());
				XMLGregorianCalendar xmlMax = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMax);
				_count_filter.setOraRegistrazioneMax(xmlMax);
				
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count (Con date max) errato");
				}

			} catch (RegistryNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryServiceException_Exception e) { 
				System.out.println("Expected exception: registry-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (RegistryNotImplementedException_Exception e) { 
				System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		
		//        {
		//        System.out.println("Invoking inUse...");
		//        org.openspcoop2.core.registry.IdAccordoCooperazione _inUse_idAccordoCooperazione = new org.openspcoop2.core.registry.IdAccordoCooperazione();
		//        try {
		//            org.openspcoop2.core.registry.ws.client.accordocooperazione.all.UseInfo _inUse__return = port.inUse(_inUse_idAccordoCooperazione);
		//            System.out.println("inUse.result=" + _inUse__return);
		//
		//        } catch (RegistryNotAuthorizedException_Exception e) { 
		//            System.out.println("Expected exception: registry-not-authorized-exception has occurred.");
		//            System.out.println(e.toString());
		//        } catch (RegistryNotFoundException_Exception e) { 
		//            System.out.println("Expected exception: registry-not-found-exception has occurred.");
		//            System.out.println(e.toString());
		//        } catch (RegistryServiceException_Exception e) { 
		//            System.out.println("Expected exception: registry-service-exception has occurred.");
		//            System.out.println(e.toString());
		//        } catch (RegistryNotImplementedException_Exception e) { 
		//            System.out.println("Expected exception: registry-not-implemented-exception has occurred.");
		//            System.out.println(e.toString());
		//        }
		//            }



		System.exit(0);
	}

}
