<?xml version="1.0" encoding="iso-8859-1"?>

<project name="WebInterfacePddConsole" basedir=".">
	<description>
        File di Script per la compilazione dell'interfaccia PddConsole
    </description>

	<import file="./local_env.xml" />
	<import file="./ant/openspcoop2-pddConsole-build.xml" />
	<import file="./ant/openspcoop2-pddConsole-war.xml" />
	<import file="./ant/openspcoop2-pddConsole-sql.xml" />
	<import file="${mvc}/build.xml" />
	<import file="${queue}/build.xml" />
	<import file="${users}/build.xml" />
	<import file="${audit}/build.xml" />
	<import file="${openspcoop2}/ant/commons/as-check.xml" />
	<import file="./ant/openspcoop2-pddConsole-sincronizzatore.xml" />
	
	<!-- directory root -->
	<property name="svn_rootDir" location="${openspcoop2}" />
	
	<!-- set properties for this build -->
	<property name="src_pddConsole" location="src/" />
	<property name="build_pddConsole" location="build/pddConsole" />
	<property name="dist_pddConsole" location="dist" />
	<property name="doc_pddConsole" location="doc" />
	<property name="sql_pddConsole" location="deploy/sql" />
	<property name="plugins_pddConsole" location="deploy/plugins" />
	<property name="cfg" location="${basedir}/deploy/properties" />
	<property name="deploy.dir" location="${basedir}/deploy" />

	<!-- Indicazione se produrre la versione per server non j2ee -->
	<var name="j2ee" value="true" />
	
	<!-- Check AS Version -->
	<if>
		<not>
			<istrue value="${_asVersionVerified}"/>
		</not>
		<then>
			<runtarget target="check_as_version" />
			<var name="_asVersionVerified" value="true"/>
		</then>
	</if>
	<if>
		<matches string="${as}" pattern="tomcat.*"/>
		<then>
			<!-- Indicazione se produrre la versione senza j2ee object: mdb e timer ejb -->
			<var name="j2ee" value="false"/>
		</then>
	</if>
	
	<!-- Jar dipendenti dall'A.S. -->
	<var name="xalan_jar" value="" />
	<var name="xalan_serializer_jar" value="" />
	<var name="commons_logging_jar" value="" />
	<var name="javax_jms_jar" value="" />
	<var name="jaxp_ri_jar" value=""/>
	<var name="jboss_classloading" value="" />
	<var name="jboss_scanning" value="" />
	<var name="jboss_deployment_structure" value="" />

	<!-- commons_logging -->
	<if>
		<or>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
			<matches string="${as}" pattern="tomcat.*"/>
		</or>
		<then>
			<var name="commons_logging_jar" value="commons-logging-1.2.jar" />
		</then>
	</if>
	<!-- javax_jms -->
	<if>
		<or>
			<matches string="${as}" pattern="tomcat.*"/>
		</or>
		<then>
			<var name="javax_jms_jar" value="javax.jms.jar" />
		</then>
	</if>
	<!-- xalan -->
	<if>
		<or>
			<matches string="${as}" pattern="tomcat.*"/>
			<equals arg1="${as}" arg2="jboss4"/>
			<equals arg1="${as}" arg2="jboss6"/>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="xalan_jar" value="xalan-2.7.1.jar" />
			<var name="xalan_serializer_jar" value="xalan-2.7.1_serializer.jar" />
		</then>
	</if>
	<!-- jaxp_ri -->
	<if>
		<or>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jaxp_ri_jar" value="jaxp-ri-1.4.5.jar"/>
		</then>
	</if>
	<!-- neethi -->
	<var name="neethi_jar" value="" />
	<if>
		<or>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="neethi_jar" value="neethi-3.0.3.jar"/>
		</then>
	</if>
	<!-- geronimo_jaxws_spec -->
	<var name="geronimo_jaxws_spec_jar" value="" />
	<if>
		<or>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="geronimo_jaxws_spec_jar" value="DADEFINIREMEGLIOgeronimo-jaxws_2.2_spec-1.1.jar"/>
		</then>
	</if>
	<!-- jboss_classloading -->
	<if>
		<or>
			<equals arg1="${as}" arg2="jboss6"/>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jboss_classloading" value="jboss-classloading.xml" />
		</then>
	</if>
	<!-- jboss_scanning -->
	<if>
		<or>
			<equals arg1="${as}" arg2="jboss6"/>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jboss_scanning" value="jboss-scanning.xml" />
		</then>
	</if>
	<!-- jboss_deployment_structure -->
	<if>
		<or>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jboss_deployment_structure" value="jboss-deployment-structure.xml" />
		</then>
	</if>
	
	
	
	<!-- Indicazione se produrre la versione singlePdD -->
	<var name="singlePdD" value="false" />
	<!-- Indicazione se produrre la versione singlePdD con registroServizi locale -->
	<var name="singlePdD.registroServizi.locale" value="true" />

	<!-- Directory per librerie -->
	<property name="lib" location="${deploy.dir}/lib" />
	<property name="jsp" location="${deploy.dir}/jsp" />
	<property name="images" location="${deploy.dir}/images" />

	
	<!-- estensione di ant (if .... ) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${required_lib}/ant/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- CLASSPATH -->
	<path id="classpath_compile" >
		<fileset dir="${required_lib}" >
			<exclude name="**/axis14/*"/>
			<exclude name="**/*README"/>
			<exclude name="openspcoop2.userlibraries"/>
		</fileset>
	</path>
	<path id="classpath_dist" >
		<fileset dir="${openspcoop2_jars}" >
			<include name="*.jar"/>
		</fileset>
	</path>	
	
	<!-- Ripulisce la distribuzione -->
	<target name="clean_pddConsole">
		<delete dir="${build_pddConsole}" />
		<delete dir="build" />
		<delete dir="${dist_pddConsole}" />
		<delete dir="${doc_pddConsole}" />
	</target>

	<!-- Create the build directory structure used by compile -->
	<target name="init_compile_pddConsole">
		<mkdir dir="${build_pddConsole}" />
		<mkdir dir="${build_pddConsole}/tmp" />
		<mkdir dir="${dist_pddConsole}" />
	</target>
	
	

	<!-- Creazione Plugins di ControlStation -->
	<target name="plugins" description="Crea l'elenco dei jar/properties installati come plugins della ControlStation">
		<!-- jar -->
		<fileset dir="${plugins_pddConsole}" id="plugins.jar">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath" refid="plugins.jar">
			<map from="${plugins_pddConsole}/" to="lib/" />
		</pathconvert>
		<pathconvert pathsep=" " property="plugins.classpath.jar" refid="plugins.jar">
			<map from="${plugins_pddConsole}/" to="" />
		</pathconvert>
		<echo message="Plugins-jar della PdDConsole: ${plugins.classpath.jar}" />

		<!-- properties -->
		<fileset dir="${plugins_pddConsole}" id="plugins.properties">
			<include name="**/*.properties" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.properties" refid="plugins.properties">
			<map from="${plugins_pddConsole}/" to="" />
		</pathconvert>
		<echo message="Plugins-properties della PdDConsole: ${plugins.classpath.properties}" />
	</target>

	
	
	<!-- Compilazioni dipendenze -->
	<target name="compile_dipendenze">
		<if>
			<istrue value="${buildPddConsole}"/>
			<then>
				<runtarget target="compile_dipendenze_invoke" />
			</then>
		</if>
	</target>
	<target name="compile_dipendenze_invoke" depends="compile_mvc,compile_users,compile_queue,compile_audit" description="compila le dipendenze" />

	<!-- Compilazione della PddConsole-->
	<target name="compile_pddConsole" depends="init_compile_pddConsole,compile_dipendenze,compile_openspcoop2_pddConsole" description="compila pddConsole"/>


	<!-- Creazione del modulo .WAR -->
	<target name="build_pddConsole" depends="plugins,compile_dipendenze,compile_pddConsole,war_openspcoop2_pddConsole" description="Crea la struttura del modulo WAR" />
	<target name="build_pddConsole_singlePdD">
		<var name="singlePdD" value="true" />
		<runtarget target="build_pddConsole" />
	</target>
	<target name="build_pddConsole_onlyConfig">
		<var name="singlePdD" value="true" />
		<var name="singlePdD.registroServizi.locale" value="false" />
		<runtarget target="build_pddConsole" />
	</target>
	
	<!-- alias -->
	<target name="build" depends="build_pddConsole"/>
	<target name="build_singlePdD" depends="build_pddConsole_singlePdD"/>
	<target name="build_onlyConfig" depends="build_pddConsole_onlyConfig"/>
	<target name="clean" depends="clean_pddConsole"/>



	<!-- Script Sincronizzatore -->
	<target name="sincronizzatore" depends="runSincronizzatore_openspcoop2_pddConsole" description="Esegue lo script di sincronizzazione"/>




	<!-- SCRIPT SQL -->
	<target name="build_script_sql_pddConsole" depends="init_compile_pddConsole,buildSql_openspcoop2_pddConsole"/>
	<target name="build_script_sql_pddConsole_singlePdD" depends="init_compile_pddConsole,buildSql_openspcoop2_pddConsole_singlePdD"/>


</project>
