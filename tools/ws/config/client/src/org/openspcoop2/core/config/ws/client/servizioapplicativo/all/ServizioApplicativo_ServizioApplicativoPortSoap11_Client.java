/*
 * OpenSPCoop - Customizable API Gateway 
 * http://www.openspcoop2.org
 * 
 * Copyright (c) 2005-2016 Link.it srl (http://link.it).
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.openspcoop2.core.config.ws.client.servizioapplicativo.all;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

import org.openspcoop2.core.config.Connettore;
import org.openspcoop2.core.config.IdSoggetto;
import org.openspcoop2.core.config.InvocazioneServizio;
import org.openspcoop2.core.config.Property;
import org.openspcoop2.core.config.RispostaAsincrona;
import org.openspcoop2.utils.date.DateManager;


/**
 * This class was generated by Apache CXF 2.7.4
 * 2014-11-21T13:04:24.593+01:00
 * Generated source version: 2.7.4
 * 
 */
public final class ServizioApplicativo_ServizioApplicativoPortSoap11_Client {

    private static final QName SERVICE_NAME = new QName("http://www.openspcoop2.org/core/config/management", "ServizioApplicativoSoap11Service");

    private ServizioApplicativo_ServizioApplicativoPortSoap11_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = ServizioApplicativoSoap11Service.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        ServizioApplicativoSoap11Service ss = new ServizioApplicativoSoap11Service(wsdlURL, ServizioApplicativo_ServizioApplicativoPortSoap11_Client.SERVICE_NAME);
        ServizioApplicativo port = ss.getServizioApplicativoPortSoap11();
	
        // PREREQUISITO SE IL DATABASE e' UN DATABASE PDDCONSOLE SINGLEPDD:
        // INSERT INTO connettori (endpointtype,nome_connettore) VALUES ('disabilitato','TESTSUITE');
        // INSERT  INTO  soggetti  (nome_soggetto,tipo_soggetto,id_connettore,codice_ipa) VALUES ('Ente','SPC',(select id from connettori where nome_connettore='TESTSUITE'),'c=it,o=Ente');

        // PREREQUISITO SE IL DATABASE e' UN DATABASE SOLO CONFIG
        // INSERT  INTO  soggetti  (nome_soggetto,tipo_soggetto) VALUES ('Ente','SPC');

        
        Date startDate = DateManager.getDate();
        
        
		new org.openspcoop2.core.config.ws.client.utils.RequestContextUtils("servizioApplicativo.soap11").addRequestContextParameters((javax.xml.ws.BindingProvider)port);  
        
		{
			System.out.println("Invoking deleteAll...");
			try {
				long _deleteAll__return = port.deleteAll();
				System.out.println("deleteAll.result=" + _deleteAll__return);

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		org.openspcoop2.core.config.ServizioApplicativo _create_servizioApplicativo = null;
		{
			System.out.println("Invoking create...");
			_create_servizioApplicativo = new org.openspcoop2.core.config.ServizioApplicativo();
			try {
				_create_servizioApplicativo.setNome("SA");
				_create_servizioApplicativo.setDescrizione("ServizioApplicativo di test");
				_create_servizioApplicativo.setTipoSoggettoProprietario("SPC");
				_create_servizioApplicativo.setNomeSoggettoProprietario("Ente");
				_create_servizioApplicativo.setInvocazioneServizio(new InvocazioneServizio());
				_create_servizioApplicativo.getInvocazioneServizio().setConnettore(new Connettore());
				_create_servizioApplicativo.getInvocazioneServizio().getConnettore().setNome("ConnettoreINV_SASPCEnte");
				_create_servizioApplicativo.getInvocazioneServizio().getConnettore().setTipo("disabilitato");
				_create_servizioApplicativo.setRispostaAsincrona(new RispostaAsincrona());
				_create_servizioApplicativo.getRispostaAsincrona().setConnettore(new Connettore());
				_create_servizioApplicativo.getRispostaAsincrona().getConnettore().setNome("ConnettoreRISP_SASPCEnte");
				_create_servizioApplicativo.getRispostaAsincrona().getConnettore().setTipo("provaCustom");
				_create_servizioApplicativo.getRispostaAsincrona().getConnettore().setCustom(true);
				Property property = new Property();
				property.setNome("prop1");
				property.setValore("Valore");
				_create_servizioApplicativo.getRispostaAsincrona().getConnettore().addProperty(property);
				_create_servizioApplicativo.setTipologiaErogazione("disabilitato");
				_create_servizioApplicativo.setTipologiaFruizione("disabilitato");
				
				port.create(_create_servizioApplicativo);
				System.out.println("CREATO");

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}


		{
			System.out.println("Invoking count...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _count_filter = null;
			try {
				_count_filter = new SearchFilterServizioApplicativo();
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count senza filtro errato");
				}

				_count_filter.setNome("SA");
				_count__return = port.count(_count_filter);
				System.out.println("count.result (filtro ok) =" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count con filtro ok errato");
				}

				_count_filter.setTipologiaErogazione("Errato");
				_count__return = port.count(_count_filter);
				System.out.println("count.result (filtro ko) =" + _count__return);
				if(_count__return!=0){
					throw new Exception("Risultato count con filtro ko errato");
				}
				
				_count_filter.setTipologiaErogazione(null);
				org.openspcoop2.core.config.ws.client.servizioapplicativo.all.RispostaAsincrona rispAs = new org.openspcoop2.core.config.ws.client.servizioapplicativo.all.RispostaAsincrona();
				org.openspcoop2.core.config.ws.client.servizioapplicativo.all.Connettore connettore = new org.openspcoop2.core.config.ws.client.servizioapplicativo.all.Connettore();
				connettore.setCustom(true);
				rispAs.setConnettore(connettore);
				_count_filter.setRispostaAsincrona(rispAs);
				_count__return = port.count(_count_filter);
				System.out.println("count.result (filtro custom ok) =" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count con filtro custom ok errato");
				}
				
				_count_filter.getRispostaAsincrona().getConnettore().setCustom(false);
				_count__return = port.count(_count_filter);
				System.out.println("count.result (filtro custom ko) =" + _count__return);
				if(_count__return!=0){
					throw new Exception("Risultato count con filtro custom ko errato");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}


		{
			System.out.println("Invoking get...");
			org.openspcoop2.core.config.IdServizioApplicativo _get_idServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			try {
				_get_idServizioApplicativo.setNome("SA");
				IdSoggetto idSoggetto = new IdSoggetto();
				idSoggetto.setTipo("SPC");
				idSoggetto.setNome("Ente");
				_get_idServizioApplicativo.setIdSoggetto(idSoggetto);
				org.openspcoop2.core.config.ServizioApplicativo _get__return = port.get(_get_idServizioApplicativo);
				List<String> notCheck = new ArrayList<String>();
				notCheck.add("oraRegistrazione");
				boolean equals = _get__return.equals(_create_servizioApplicativo,notCheck);
				System.out.println("get.result (equals con create)=" + equals);
				if(!equals){
					StringBuffer bfDiff = new StringBuffer();
					_get__return.diff(_create_servizioApplicativo, bfDiff);
					throw new Exception("Differenze [get vs create]: "+bfDiff.toString());
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotFoundException_Exception e) { 
				System.out.println("Expected exception: config-not-found-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigMultipleResultException_Exception e) { 
				System.out.println("Expected exception: config-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		{
			System.out.println("Invoking find...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _find_filter = null;
			try {
				_find_filter = new SearchFilterServizioApplicativo();
				org.openspcoop2.core.config.ServizioApplicativo _find__return = port.find(_find_filter);
				List<String> notCheck = new ArrayList<String>();
				notCheck.add("oraRegistrazione");
				boolean equals = _find__return.equals(_create_servizioApplicativo,notCheck);
				System.out.println("find.result (equals con create)=" + equals);
				if(!equals){
					StringBuffer bfDiff = new StringBuffer();
					_find__return.diff(_create_servizioApplicativo, bfDiff);
					throw new Exception("Differenze [get vs create]: "+bfDiff.toString());
				}

				_find_filter = new SearchFilterServizioApplicativo();
				_find_filter.setNome("SA");
				_find__return = port.find(_find_filter);
				equals = _find__return.equals(_create_servizioApplicativo,notCheck);
				System.out.println("find.result con filtro (equals con create)=" + equals);
				if(!equals){
					StringBuffer bfDiff = new StringBuffer();
					_find__return.diff(_create_servizioApplicativo, bfDiff);
					throw new Exception("Differenze [get vs create]: "+bfDiff.toString());
				}

				_find_filter = new SearchFilterServizioApplicativo();
				_find_filter.setNome("SA");
				_find_filter.setNomeSoggettoProprietario("SBAGLIATO");
				try{
					_find__return = port.find(_find_filter);
					throw new Exception("Expected Not Found");
				}catch (ConfigNotFoundException_Exception e) { 
					System.out.println("NOT FOUND ATTESO");
					System.out.println("All'interno dell'eccezione trovo: ");
					System.out.println("\t - ErrorCode: "+e.getFaultInfo().getErrorCode());
					System.out.println("\t - ErrorMessage: "+e.getFaultInfo().getErrorMessage());
					System.out.println("\t - MethodName: "+e.getFaultInfo().getMethodName());
					System.out.println("\t - ObjectId: "+e.getFaultInfo().getObjectId());
				}
			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotFoundException_Exception e) { 
				System.out.println("Expected exception: config-not-found-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigMultipleResultException_Exception e) { 
				System.out.println("Expected exception: config-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}



		{
			System.out.println("Invoking updateOrCreate...");
			org.openspcoop2.core.config.IdServizioApplicativo _updateOrCreate_oldIdServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			_updateOrCreate_oldIdServizioApplicativo.setNome("SA2");
			IdSoggetto idSoggetto = new IdSoggetto();
			idSoggetto.setTipo("SPC");
			idSoggetto.setNome("Ente");
			_updateOrCreate_oldIdServizioApplicativo.setIdSoggetto(idSoggetto);
			org.openspcoop2.core.config.ServizioApplicativo _updateOrCreate_servizioApplicativo = new org.openspcoop2.core.config.ServizioApplicativo();
			_updateOrCreate_servizioApplicativo.setNome("SA2");
			_updateOrCreate_servizioApplicativo.setTipoSoggettoProprietario("SPC");
			_updateOrCreate_servizioApplicativo.setNomeSoggettoProprietario("Ente");
			try {
				port.updateOrCreate(_updateOrCreate_oldIdServizioApplicativo, _updateOrCreate_servizioApplicativo);
				System.out.println("CREATO");

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}



		{

			SearchFilterServizioApplicativo _find_filter = new SearchFilterServizioApplicativo();
			try{
				port.find(_find_filter);
				throw new Exception("Expected Multiple Result");
			}catch (ConfigMultipleResultException_Exception e) { 
				System.out.println("MULTIPLE RESULT ATTESO");
				System.out.println("All'interno dell'eccezione trovo: ");
				System.out.println("\t - ErrorCode: "+e.getFaultInfo().getErrorCode());
				System.out.println("\t - ErrorMessage: "+e.getFaultInfo().getErrorMessage());
				System.out.println("\t - MethodName: "+e.getFaultInfo().getMethodName());
				System.out.println("\t - ObjectId: "+e.getFaultInfo().getObjectId());
			}

		}



		{
			System.out.println("Invoking findAll...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _findAll_filter = new SearchFilterServizioApplicativo();
			try {
				_findAll_filter.setTipoSoggettoProprietario("SPC");
				_findAll_filter.setNomeSoggettoProprietario("Ente");
				java.util.List<org.openspcoop2.core.config.ServizioApplicativo> _findAll__return = port.findAll(_findAll_filter);
				System.out.println("findAll.result=" + _findAll__return.size());
				if(2!=_findAll__return.size()){
					throw new Exception("Ritornata dimensione errata");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}		


		{
			System.out.println("Invoking exists...");
			org.openspcoop2.core.config.IdServizioApplicativo _exists_idServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			try {
				_exists_idServizioApplicativo.setNome("SA");
				IdSoggetto idSoggetto = new IdSoggetto();
				idSoggetto.setTipo("SPC");
				idSoggetto.setNome("Ente");
				_exists_idServizioApplicativo.setIdSoggetto(idSoggetto);
				
				boolean _exists__return = port.exists(_exists_idServizioApplicativo);
				System.out.println("exists.result=" + _exists__return);
				if(!_exists__return){
					throw new Exception("Non trovato???");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigMultipleResultException_Exception e) { 
				System.out.println("Expected exception: config-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		{
			System.out.println("Invoking update...");
			org.openspcoop2.core.config.IdServizioApplicativo _update_oldIdServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			_update_oldIdServizioApplicativo.setNome("SA");
			IdSoggetto idSoggetto = new IdSoggetto();
			idSoggetto.setTipo("SPC");
			idSoggetto.setNome("Ente");
			_update_oldIdServizioApplicativo.setIdSoggetto(idSoggetto);
			_create_servizioApplicativo.setNome("SANUOVO");
			_create_servizioApplicativo.setDescrizione("Ho aggiunto la descrizione");
			_create_servizioApplicativo.getInvocazioneServizio().getConnettore().setNome("ConnettoreINV_SANUOVOSPCEnte");
			_create_servizioApplicativo.getRispostaAsincrona().getConnettore().setNome("ConnettoreRISP_SANUOVOSPCEnte");
			try {
				port.update(_update_oldIdServizioApplicativo, _create_servizioApplicativo);

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotFoundException_Exception e) { 
				System.out.println("Expected exception: config-not-found-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}		


		{
			System.out.println("Invoking get per verifica UPDATE...");
			org.openspcoop2.core.config.IdServizioApplicativo _get_idServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			try {
				_get_idServizioApplicativo.setNome("SANUOVO");
				IdSoggetto idSoggetto = new IdSoggetto();
				idSoggetto.setTipo("SPC");
				idSoggetto.setNome("Ente");
				_get_idServizioApplicativo.setIdSoggetto(idSoggetto);
				org.openspcoop2.core.config.ServizioApplicativo _get__return = port.get(_get_idServizioApplicativo);
				List<String> notCheck = new ArrayList<String>();
				notCheck.add("oraRegistrazione");
				boolean equals = _get__return.equals(_create_servizioApplicativo,notCheck);
				System.out.println("get.result (equals con create)=" + equals);
				if(!equals){
					StringBuffer bfDiff = new StringBuffer();
					_get__return.diff(_create_servizioApplicativo, bfDiff);
					throw new Exception("Differenze [get vs create]: "+bfDiff.toString());
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotFoundException_Exception e) { 
				System.out.println("Expected exception: config-not-found-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigMultipleResultException_Exception e) { 
				System.out.println("Expected exception: config-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		{
			System.out.println("Invoking exists per verifica UPDATE ...");
			org.openspcoop2.core.config.IdServizioApplicativo _exists_idServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			try {
				_exists_idServizioApplicativo.setNome("SA");
				IdSoggetto idSoggetto = new IdSoggetto();
				idSoggetto.setTipo("SPC");
				idSoggetto.setNome("Ente");
				_exists_idServizioApplicativo.setIdSoggetto(idSoggetto);

				boolean _exists__return = port.exists(_exists_idServizioApplicativo);
				System.out.println("exists.result=" + _exists__return);
				if(_exists__return){
					throw new Exception("Trovato???");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigMultipleResultException_Exception e) { 
				System.out.println("Expected exception: config-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}



		{
			System.out.println("Invoking updateOrCreate...");
			org.openspcoop2.core.config.IdServizioApplicativo _update_oldIdServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			_update_oldIdServizioApplicativo.setNome("SANUOVO");
			IdSoggetto idSoggetto = new IdSoggetto();
			idSoggetto.setTipo("SPC");
			idSoggetto.setNome("Ente");
			_update_oldIdServizioApplicativo.setIdSoggetto(idSoggetto);
			_create_servizioApplicativo.setNome("SANUOVOANCORAPIUNUOVO");
			_create_servizioApplicativo.setDescrizione("Ho aggiunto la descrizione e la tipologia di erogazione");
			_create_servizioApplicativo.setTipologiaErogazione("trasparente");
			_create_servizioApplicativo.getInvocazioneServizio().getConnettore().setNome("ConnettoreINV_SANUOVOANCORAPIUNUOVOSPCEnte");
			_create_servizioApplicativo.getRispostaAsincrona().getConnettore().setNome("ConnettoreRISP_SANUOVOANCORAPIUNUOVOSPCEnte");
			try {
				port.updateOrCreate(_update_oldIdServizioApplicativo, _create_servizioApplicativo);

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			}catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}		


		{
			System.out.println("Invoking get per verifica UPDATE OR CREATE...");
			org.openspcoop2.core.config.IdServizioApplicativo _get_idServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			try {
				_get_idServizioApplicativo.setNome("SANUOVOANCORAPIUNUOVO");
				IdSoggetto idSoggetto = new IdSoggetto();
				idSoggetto.setTipo("SPC");
				idSoggetto.setNome("Ente");
				_get_idServizioApplicativo.setIdSoggetto(idSoggetto);
				org.openspcoop2.core.config.ServizioApplicativo _get__return = port.get(_get_idServizioApplicativo);
				List<String> notCheck = new ArrayList<String>();
				notCheck.add("statoPackage");
				notCheck.add("oraRegistrazione");
				boolean equals = _get__return.equals(_create_servizioApplicativo,notCheck);
				System.out.println("get.result (equals con create)=" + equals);
				if(!equals){
					StringBuffer bfDiff = new StringBuffer();
					_get__return.diff(_create_servizioApplicativo, bfDiff);
					throw new Exception("Differenze [get vs create]: "+bfDiff.toString());
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotFoundException_Exception e) { 
				System.out.println("Expected exception: config-not-found-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigMultipleResultException_Exception e) { 
				System.out.println("Expected exception: config-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		{
			System.out.println("Invoking exists per verifica UPDATE OR CREATE ...");
			org.openspcoop2.core.config.IdServizioApplicativo _exists_idServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			try {
				_exists_idServizioApplicativo.setNome("SANUOVO");
				IdSoggetto idSoggetto = new IdSoggetto();
				idSoggetto.setTipo("SPC");
				idSoggetto.setNome("Ente");
				_exists_idServizioApplicativo.setIdSoggetto(idSoggetto);

				boolean _exists__return = port.exists(_exists_idServizioApplicativo);
				System.out.println("exists.result=" + _exists__return);
				if(_exists__return){
					throw new Exception("Trovato???");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigMultipleResultException_Exception e) { 
				System.out.println("Expected exception: config-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}


		{
			System.out.println("Invoking findAllIds...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _findAllIds_filter = null;
			try {
				_findAllIds_filter = new SearchFilterServizioApplicativo();
				_findAllIds_filter.setLimit(new BigInteger("15"));
				java.util.List<org.openspcoop2.core.config.IdServizioApplicativo> _findAllIds__return = port.findAllIds(_findAllIds_filter);
				System.out.println("findAllIds.result=" + _findAllIds__return.size());
				if(2!=_findAllIds__return.size()){
					throw new Exception("Attesi 2 id");
				}

				_findAllIds_filter = new SearchFilterServizioApplicativo();
				_findAllIds_filter.setNome("SA2");
				_findAllIds_filter.setLimit(new BigInteger("15"));
				_findAllIds__return = port.findAllIds(_findAllIds_filter);
				System.out.println("findAllIds.result (con filtro)=" + _findAllIds__return.size());
				if(1!=_findAllIds__return.size()){
					throw new Exception("Attesi 1 id");
				}

				_findAllIds_filter = new SearchFilterServizioApplicativo();
				_findAllIds_filter.setOffset(new BigInteger("1"));
				_findAllIds__return = port.findAllIds(_findAllIds_filter);
				System.out.println("findAllIds.result (con offset)=" + _findAllIds__return.size());
				if(1!=_findAllIds__return.size()){
					throw new Exception("Attesi 1 id");
				}

				_findAllIds_filter = new SearchFilterServizioApplicativo();
				_findAllIds_filter.setOffset(new BigInteger("2"));
				_findAllIds_filter.setLimit(new BigInteger("23"));
				_findAllIds__return = port.findAllIds(_findAllIds_filter);
				System.out.println("findAllIds.result (con offset e limit)=" + _findAllIds__return.size());
				if(0!=_findAllIds__return.size()){
					throw new Exception("Attesi 0 id");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}



		{
			System.out.println("Invoking deleteById...");
			org.openspcoop2.core.config.IdServizioApplicativo _deleteById_idServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			try {
				_deleteById_idServizioApplicativo.setNome("SA2");
				IdSoggetto idSoggetto = new IdSoggetto();
				idSoggetto.setTipo("SPC");
				idSoggetto.setNome("Ente");
				_deleteById_idServizioApplicativo.setIdSoggetto(idSoggetto);
				port.deleteById(_deleteById_idServizioApplicativo);

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		{
			System.out.println("Invoking exists per verifica DELETE BY ID ...");
			org.openspcoop2.core.config.IdServizioApplicativo _exists_idServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			try {
				_exists_idServizioApplicativo.setNome("SA2");
				IdSoggetto idSoggetto = new IdSoggetto();
				idSoggetto.setTipo("SPC");
				idSoggetto.setNome("Ente");
				_exists_idServizioApplicativo.setIdSoggetto(idSoggetto);

				boolean _exists__return = port.exists(_exists_idServizioApplicativo);
				System.out.println("exists.result=" + _exists__return);
				if(_exists__return){
					throw new Exception("Trovato???");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigMultipleResultException_Exception e) { 
				System.out.println("Expected exception: config-multiple-result-exception has occurred.");
				System.out.println(e.toString());
			}
		}



		{
			System.out.println("Invoking delete...");
			try {
				port.delete(_create_servizioApplicativo);

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}


		{
			System.out.println("Invoking count verifica DELETE...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _count_filter = null;
			try {
				_count_filter = new SearchFilterServizioApplicativo();
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=0){
					throw new Exception("Risultato count senza filtro errato");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}




		{
			System.out.println("Invoking updateOrCreate...");
			org.openspcoop2.core.config.IdServizioApplicativo _update_oldIdServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			_update_oldIdServizioApplicativo.setNome(_create_servizioApplicativo.getNome());
			IdSoggetto idSoggetto = new IdSoggetto();
			idSoggetto.setTipo("SPC");
			idSoggetto.setNome("Ente");
			_update_oldIdServizioApplicativo.setIdSoggetto(idSoggetto);
			try {
				port.updateOrCreate(_update_oldIdServizioApplicativo, _create_servizioApplicativo);

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			}catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}




		{
			System.out.println("Invoking deleteAllByFilter...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _deleteAllByFilter_filter = null;
			try {
				_deleteAllByFilter_filter = new SearchFilterServizioApplicativo();
				long _deleteAllByFilter__return = port.deleteAllByFilter(_deleteAllByFilter_filter);
				System.out.println("deleteAllByFilter.result=" + _deleteAllByFilter__return);
				if(1!=_deleteAllByFilter__return){
					throw new Exception("Attesa 1 eliminazione");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _count_filter = null;
			try {
				_count_filter = new SearchFilterServizioApplicativo();
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=0){
					throw new Exception("Risultato count senza filtro errato");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}

		
		{
			System.out.println("Invoking updateOrCreate...");
			org.openspcoop2.core.config.IdServizioApplicativo _update_oldIdServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
			_update_oldIdServizioApplicativo.setNome(_create_servizioApplicativo.getNome());
			IdSoggetto idSoggetto = new IdSoggetto();
			idSoggetto.setTipo("SPC");
			idSoggetto.setNome("Ente");
			_update_oldIdServizioApplicativo.setIdSoggetto(idSoggetto);
			try {
				port.updateOrCreate(_update_oldIdServizioApplicativo, _create_servizioApplicativo);

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			}catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}


		
		{
			System.out.println("Invoking deleteAllByFilter...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _deleteAllByFilter_filter = null;
			try {
				_deleteAllByFilter_filter = new SearchFilterServizioApplicativo();
				_deleteAllByFilter_filter.setNome("PROVASBAGLIATA");
				long _deleteAllByFilter__return = port.deleteAllByFilter(_deleteAllByFilter_filter);
				System.out.println("deleteAllByFilter.result=" + _deleteAllByFilter__return);
				if(0!=_deleteAllByFilter__return){
					throw new Exception("Attesa 0 eliminazione");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		
		
		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _count_filter = null;
			try {
				_count_filter = new SearchFilterServizioApplicativo();
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count senza filtro errato");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		
		
		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER (Con date min e max)...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _count_filter = null;
			try {
				_count_filter = new SearchFilterServizioApplicativo();
				
				Calendar cMin = Calendar.getInstance();
				cMin.setTime(startDate);
				XMLGregorianCalendar xmlMin = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMin);
				_count_filter.setOraRegistrazioneMin(xmlMin);

				Calendar cMax = Calendar.getInstance();
				cMax.setTime(DateManager.getDate());
				XMLGregorianCalendar xmlMax = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMax);
				_count_filter.setOraRegistrazioneMax(xmlMax);
				
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count (Con date min e max) errato");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER (Con date min e max errate)...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _count_filter = null;
			try {
				_count_filter = new SearchFilterServizioApplicativo();
				
				Calendar cMin = Calendar.getInstance();
				//cMin.setTime(startDate);
				cMin.setTime(DateManager.getDate());
				XMLGregorianCalendar xmlMin = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMin);
				_count_filter.setOraRegistrazioneMin(xmlMin);

				Calendar cMax = Calendar.getInstance();
				cMax.setTime(DateManager.getDate());
				XMLGregorianCalendar xmlMax = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMax);
				_count_filter.setOraRegistrazioneMax(xmlMax);
				
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=0){
					throw new Exception("Risultato count (Con date min e max errate) errato");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER (Con date min)...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _count_filter = null;
			try {
				_count_filter = new SearchFilterServizioApplicativo();
				
				Calendar cMin = Calendar.getInstance();
				cMin.setTime(startDate);
				XMLGregorianCalendar xmlMin = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMin);
				_count_filter.setOraRegistrazioneMin(xmlMin);
				
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count (Con date min) errato");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		
		{
			System.out.println("Invoking count verifica DELETE ALL BY FILTER (Con date max)...");
			org.openspcoop2.core.config.ws.client.servizioapplicativo.all.SearchFilterServizioApplicativo _count_filter = null;
			try {
				_count_filter = new SearchFilterServizioApplicativo();

				Calendar cMax = Calendar.getInstance();
				cMax.setTime(DateManager.getDate());
				XMLGregorianCalendar xmlMax = DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)cMax);
				_count_filter.setOraRegistrazioneMax(xmlMax);
				
				long _count__return = port.count(_count_filter);
				System.out.println("count.result=" + _count__return);
				if(_count__return!=1){
					throw new Exception("Risultato count (Con date max) errato");
				}

			} catch (ConfigNotAuthorizedException_Exception e) { 
				System.out.println("Expected exception: config-not-authorized-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigServiceException_Exception e) { 
				System.out.println("Expected exception: config-service-exception has occurred.");
				System.out.println(e.toString());
			} catch (ConfigNotImplementedException_Exception e) { 
				System.out.println("Expected exception: config-not-implemented-exception has occurred.");
				System.out.println(e.toString());
			}
		}
		

		//        {
		//        System.out.println("Invoking inUse...");
		//        org.openspcoop2.core.config.IdServizioApplicativo _inUse_idServizioApplicativo = new org.openspcoop2.core.config.IdServizioApplicativo();
		//        try {
		//            org.openspcoop2.core.config.ws.client.servizioapplicativo.all.UseInfo _inUse__return = port.inUse(_inUse_idServizioApplicativo);
		//            System.out.println("inUse.result=" + _inUse__return);
		//
		//        } catch (ConfigNotAuthorizedException_Exception e) { 
		//            System.out.println("Expected exception: config-not-authorized-exception has occurred.");
		//            System.out.println(e.toString());
		//        } catch (ConfigNotFoundException_Exception e) { 
		//            System.out.println("Expected exception: config-not-found-exception has occurred.");
		//            System.out.println(e.toString());
		//        } catch (ConfigServiceException_Exception e) { 
		//            System.out.println("Expected exception: config-service-exception has occurred.");
		//            System.out.println(e.toString());
		//        } catch (ConfigNotImplementedException_Exception e) { 
		//            System.out.println("Expected exception: config-not-implemented-exception has occurred.");
		//            System.out.println(e.toString());
		//        }
		//            }

        System.exit(0);
    }

}
