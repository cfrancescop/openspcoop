-- **** Repository Buste ****

CREATE TABLE REPOSITORY_BUSTE
(
	ID_MESSAGGIO VARCHAR2(255) NOT NULL,
	TIPO VARCHAR2(255) NOT NULL,
	MITTENTE VARCHAR2(255) NOT NULL,
	IDPORTA_MITTENTE VARCHAR2(255),
	TIPO_MITTENTE VARCHAR2(255) NOT NULL,
	IND_TELEMATICO_MITT VARCHAR2(255),
	DESTINATARIO VARCHAR2(255) NOT NULL,
	IDPORTA_DESTINATARIO VARCHAR2(255),
	TIPO_DESTINATARIO VARCHAR2(255) NOT NULL,
	IND_TELEMATICO_DEST VARCHAR2(255),
	VERSIONE_SERVIZIO VARCHAR2(255),
	SERVIZIO VARCHAR2(255),
	TIPO_SERVIZIO VARCHAR2(255),
	AZIONE VARCHAR2(255),
	PROFILO_DI_COLLABORAZIONE VARCHAR2(255),
	SERVIZIO_CORRELATO VARCHAR2(255),
	TIPO_SERVIZIO_CORRELATO VARCHAR2(255),
	COLLABORAZIONE VARCHAR2(255),
	SEQUENZA NUMBER,
	INOLTRO_SENZA_DUPLICATI NUMBER NOT NULL,
	CONFERMA_RICEZIONE NUMBER NOT NULL,
	ORA_REGISTRAZIONE TIMESTAMP,
	TIPO_ORA_REGISTRAZIONE VARCHAR2(255),
	RIFERIMENTO_MESSAGGIO VARCHAR2(255),
	SCADENZA_BUSTA TIMESTAMP NOT NULL,
	DUPLICATI NUMBER NOT NULL,
	-- Dati di integrazione
	LOCATION_PD VARCHAR2(255),
	SERVIZIO_APPLICATIVO VARCHAR2(255),
	MODULO_IN_ATTESA VARCHAR2(255),
	SCENARIO VARCHAR2(255),
	PROTOCOLLO VARCHAR2(255) NOT NULL,
	-- Booleani che indicano l'attuali modalita' di utilizzo del repository:
	--  HISTORY: Busta usata per funzionalita di confermaRicezione(OUTBOX)/FiltroDuplicati(INBOX)
	--  PROFILI: Busta usata per funzionalita di profili di collaborazione
	--  PDD:     Busta usata eventualmente da un PdD
	--  
	--  DEFAULT CONTROLLER: 3 interi con semantica booleana (1->true, 0->false)
	HISTORY NUMBER NOT NULL,
	PROFILO NUMBER NOT NULL,
	PDD NUMBER NOT NULL,
	REPOSITORY_ACCESS RAW(8) DEFAULT 'C101' NOT NULL,
	-- fk/pk columns
	-- check constraints
	CONSTRAINT chk_REPOSITORY_BUSTE_1 CHECK (TIPO IN ('INBOX','OUTBOX')),
	-- fk/pk keys constraints
	CONSTRAINT pk_REPOSITORY_BUSTE PRIMARY KEY (ID_MESSAGGIO,TIPO)
);

-- index
CREATE INDEX REP_BUSTE_SEARCH ON REPOSITORY_BUSTE (SCADENZA_BUSTA,TIPO,HISTORY,PROFILO,PDD);
CREATE INDEX REP_BUSTE_SEARCH_RA ON REPOSITORY_BUSTE (SCADENZA_BUSTA,TIPO,REPOSITORY_ACCESS);
CREATE INDEX REP_BUSTE_SEARCH_TIPO ON REPOSITORY_BUSTE (TIPO,HISTORY,PROFILO,PDD);
CREATE INDEX REP_BUSTE_SEARCH_TIPO_RA ON REPOSITORY_BUSTE (TIPO,REPOSITORY_ACCESS);

ALTER TABLE REPOSITORY_BUSTE MODIFY HISTORY DEFAULT 0;
ALTER TABLE REPOSITORY_BUSTE MODIFY PROFILO DEFAULT 0;
ALTER TABLE REPOSITORY_BUSTE MODIFY PDD DEFAULT 0;



CREATE SEQUENCE seq_LISTA_RISCONTRI MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 INCREMENT BY 1 CACHE 2 CYCLE;

CREATE TABLE LISTA_RISCONTRI
(
	ID_MESSAGGIO VARCHAR2(255) NOT NULL,
	TIPO VARCHAR2(255) NOT NULL,
	ID_RISCONTRO VARCHAR2(255),
	ORA_REGISTRAZIONE TIMESTAMP,
	TIPO_ORA_REGISTRAZIONE VARCHAR2(255),
	-- fk/pk columns
	id NUMBER NOT NULL,
	-- check constraints
	CONSTRAINT chk_LISTA_RISCONTRI_1 CHECK (TIPO IN ('INBOX','OUTBOX')),
	-- fk/pk keys constraints
	CONSTRAINT fk_LISTA_RISCONTRI_1 FOREIGN KEY (ID_MESSAGGIO,TIPO) REFERENCES REPOSITORY_BUSTE(ID_MESSAGGIO,TIPO) ON DELETE CASCADE,
	CONSTRAINT pk_LISTA_RISCONTRI PRIMARY KEY (id)
);

-- index
CREATE INDEX LISTA_RISC_ID ON LISTA_RISCONTRI (ID_MESSAGGIO,TIPO);
CREATE TRIGGER trg_LISTA_RISCONTRI
BEFORE
insert on LISTA_RISCONTRI
for each row
begin
   IF (:new.id IS NULL) THEN
      SELECT seq_LISTA_RISCONTRI.nextval INTO :new.id
                FROM DUAL;
   END IF;
end;
/



CREATE SEQUENCE seq_LISTA_TRASMISSIONI MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 INCREMENT BY 1 CACHE 2 CYCLE;

CREATE TABLE LISTA_TRASMISSIONI
(
	ID_MESSAGGIO VARCHAR2(255) NOT NULL,
	TIPO VARCHAR2(255) NOT NULL,
	ORIGINE VARCHAR2(255),
	TIPO_ORIGINE VARCHAR2(255),
	DESTINAZIONE VARCHAR2(255),
	TIPO_DESTINAZIONE VARCHAR2(255),
	ORA_REGISTRAZIONE TIMESTAMP,
	TIPO_ORA_REGISTRAZIONE VARCHAR2(255),
	-- fk/pk columns
	id NUMBER NOT NULL,
	-- check constraints
	CONSTRAINT chk_LISTA_TRASMISSIONI_1 CHECK (TIPO IN ('INBOX','OUTBOX')),
	-- fk/pk keys constraints
	CONSTRAINT fk_LISTA_TRASMISSIONI_1 FOREIGN KEY (ID_MESSAGGIO,TIPO) REFERENCES REPOSITORY_BUSTE(ID_MESSAGGIO,TIPO) ON DELETE CASCADE,
	CONSTRAINT pk_LISTA_TRASMISSIONI PRIMARY KEY (id)
);

-- index
CREATE INDEX LISTA_TRASM_ID ON LISTA_TRASMISSIONI (ID_MESSAGGIO,TIPO);
CREATE TRIGGER trg_LISTA_TRASMISSIONI
BEFORE
insert on LISTA_TRASMISSIONI
for each row
begin
   IF (:new.id IS NULL) THEN
      SELECT seq_LISTA_TRASMISSIONI.nextval INTO :new.id
                FROM DUAL;
   END IF;
end;
/



CREATE SEQUENCE seq_LISTA_ECCEZIONI MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 INCREMENT BY 1 CACHE 2 CYCLE;

CREATE TABLE LISTA_ECCEZIONI
(
	ID_MESSAGGIO VARCHAR2(255) NOT NULL,
	TIPO VARCHAR2(255) NOT NULL,
	VALIDAZIONE NUMBER,
	CONTESTO VARCHAR2(255),
	CODICE VARCHAR2(255),
	RILEVANZA VARCHAR2(255),
	POSIZIONE CLOB,
	-- fk/pk columns
	id NUMBER NOT NULL,
	-- check constraints
	CONSTRAINT chk_LISTA_ECCEZIONI_1 CHECK (TIPO IN ('INBOX','OUTBOX')),
	-- fk/pk keys constraints
	CONSTRAINT fk_LISTA_ECCEZIONI_1 FOREIGN KEY (ID_MESSAGGIO,TIPO) REFERENCES REPOSITORY_BUSTE(ID_MESSAGGIO,TIPO) ON DELETE CASCADE,
	CONSTRAINT pk_LISTA_ECCEZIONI PRIMARY KEY (id)
);

-- index
CREATE INDEX LISTA_ECC_ID ON LISTA_ECCEZIONI (ID_MESSAGGIO,TIPO);
CREATE INDEX LISTA_ECC_VALIDAZIONE ON LISTA_ECCEZIONI (ID_MESSAGGIO,TIPO,VALIDAZIONE);
CREATE TRIGGER trg_LISTA_ECCEZIONI
BEFORE
insert on LISTA_ECCEZIONI
for each row
begin
   IF (:new.id IS NULL) THEN
      SELECT seq_LISTA_ECCEZIONI.nextval INTO :new.id
                FROM DUAL;
   END IF;
end;
/



CREATE SEQUENCE seq_LISTA_EXT_PROTOCOL_INFO MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 INCREMENT BY 1 CACHE 2 CYCLE;

CREATE TABLE LISTA_EXT_PROTOCOL_INFO
(
	ID_MESSAGGIO VARCHAR2(255) NOT NULL,
	TIPO VARCHAR2(255) NOT NULL,
	NOME VARCHAR2(255) NOT NULL,
	VALORE CLOB NOT NULL,
	-- fk/pk columns
	id NUMBER NOT NULL,
	-- check constraints
	CONSTRAINT chk_LISTA_EXT_PROTOCOL_INFO_1 CHECK (TIPO IN ('INBOX','OUTBOX')),
	-- fk/pk keys constraints
	CONSTRAINT fk_LISTA_EXT_PROTOCOL_INFO_1 FOREIGN KEY (ID_MESSAGGIO,TIPO) REFERENCES REPOSITORY_BUSTE(ID_MESSAGGIO,TIPO) ON DELETE CASCADE,
	CONSTRAINT pk_LISTA_EXT_PROTOCOL_INFO PRIMARY KEY (id)
);

-- index
CREATE INDEX LISTA_EXT_ID ON LISTA_EXT_PROTOCOL_INFO (ID_MESSAGGIO,TIPO);
CREATE TRIGGER trg_LISTA_EXT_PROTOCOL_INFO
BEFORE
insert on LISTA_EXT_PROTOCOL_INFO
for each row
begin
   IF (:new.id IS NULL) THEN
      SELECT seq_LISTA_EXT_PROTOCOL_INFO.nextval INTO :new.id
                FROM DUAL;
   END IF;
end;
/



-- **** Riscontri ****

CREATE TABLE RISCONTRI_DA_RICEVERE
(
	ID_MESSAGGIO VARCHAR2(255) NOT NULL,
	DATA_INVIO TIMESTAMP NOT NULL,
	-- fk/pk columns
	-- fk/pk keys constraints
	CONSTRAINT pk_RISCONTRI_DA_RICEVERE PRIMARY KEY (ID_MESSAGGIO)
);

-- index
CREATE INDEX RISCONTRI_NON_RICEVUTI ON RISCONTRI_DA_RICEVERE (DATA_INVIO);

-- **** Sequenze ****

CREATE TABLE SEQUENZA_DA_INVIARE
(
	MITTENTE VARCHAR2(255) NOT NULL,
	TIPO_MITTENTE VARCHAR2(255) NOT NULL,
	DESTINATARIO VARCHAR2(255) NOT NULL,
	TIPO_DESTINATARIO VARCHAR2(255) NOT NULL,
	SERVIZIO VARCHAR2(255) NOT NULL,
	TIPO_SERVIZIO VARCHAR2(255) NOT NULL,
	AZIONE VARCHAR2(255) NOT NULL,
	PROSSIMA_SEQUENZA NUMBER NOT NULL,
	ID_COLLABORAZIONE VARCHAR2(255) NOT NULL,
	-- fk/pk columns
	-- fk/pk keys constraints
	CONSTRAINT pk_SEQUENZA_DA_INVIARE PRIMARY KEY (MITTENTE,TIPO_MITTENTE,DESTINATARIO,TIPO_DESTINATARIO,SERVIZIO,TIPO_SERVIZIO,AZIONE)
);


ALTER TABLE SEQUENZA_DA_INVIARE MODIFY AZIONE DEFAULT '';


CREATE TABLE SEQUENZA_DA_RICEVERE
(
	ID_COLLABORAZIONE VARCHAR2(255) NOT NULL,
	SEQUENZA_ATTESA NUMBER NOT NULL,
	-- le informazioni su mitt/dest/servizio/azione servono per un controllo di validazione sulla collaborazione
	MITTENTE VARCHAR2(255) NOT NULL,
	TIPO_MITTENTE VARCHAR2(255) NOT NULL,
	DESTINATARIO VARCHAR2(255) NOT NULL,
	TIPO_DESTINATARIO VARCHAR2(255) NOT NULL,
	SERVIZIO VARCHAR2(255) NOT NULL,
	TIPO_SERVIZIO VARCHAR2(255) NOT NULL,
	AZIONE VARCHAR2(255),
	-- fk/pk columns
	-- fk/pk keys constraints
	CONSTRAINT pk_SEQUENZA_DA_RICEVERE PRIMARY KEY (ID_COLLABORAZIONE)
);


-- **** Asincroni ****

CREATE TABLE ASINCRONO
(
	ID_MESSAGGIO VARCHAR2(255) NOT NULL,
	TIPO VARCHAR2(255) NOT NULL,
	ORA_REGISTRAZIONE TIMESTAMP NOT NULL,
	RICEVUTA_ASINCRONA NUMBER NOT NULL,
	TIPO_SERVIZIO_CORRELATO VARCHAR2(255),
	SERVIZIO_CORRELATO VARCHAR2(255),
	-- per diversificare il flusso di richiesta/ricevuta da risposta(richiestaStato)/ricevuta(Risposta)
	IS_RICHIESTA NUMBER NOT NULL,
	ID_ASINCRONO VARCHAR2(255) NOT NULL,
	ID_COLLABORAZIONE VARCHAR2(255),
	-- 1 se la ricevuta applicativa e' abilitata, 0 se non lo e'
	RICEVUTA_APPLICATIVA NUMBER NOT NULL,
	-- serve per la re-spedizione di una risposta asincrona
	BACKUP_ID_RICHIESTA VARCHAR2(255),
	-- fk/pk columns
	-- check constraints
	CONSTRAINT chk_ASINCRONO_1 CHECK (TIPO IN ('INBOX','OUTBOX')),
	-- fk/pk keys constraints
	CONSTRAINT pk_ASINCRONO PRIMARY KEY (ID_MESSAGGIO,TIPO)
);

-- index
CREATE INDEX ASINCRONO_BACKUP_ID ON ASINCRONO (BACKUP_ID_RICHIESTA);
CREATE INDEX ASINCRONO_IS_RICEVUTA ON ASINCRONO (ID_MESSAGGIO,TIPO,RICEVUTA_ASINCRONA);
CREATE INDEX ASINCRONO_NON_RICEVUTE ON ASINCRONO (ORA_REGISTRAZIONE,TIPO,RICEVUTA_ASINCRONA,RICEVUTA_APPLICATIVA);
